// This file is auto-generated by @hey-api/openapi-ts

import {
  infiniteQueryOptions,
  queryOptions,
  type InfiniteData,
  type UseMutationOptions,
} from '@tanstack/react-query'
import { client as _heyApiClient } from '../client.gen'
import {
  createChatTranscriptionsTranscriptionIdChatPost,
  createMinuteTranscriptionTranscriptionIdMinutesPost,
  createMinuteVersionMinutesMinuteIdVersionsPost,
  createRecordingRecordingsPost,
  createTranscriptionTranscriptionsPost,
  createUserTemplateUserTemplatesPost,
  deleteChatsTranscriptionsTranscriptionIdChatDelete,
  deleteChatTranscriptionsTranscriptionIdChatChatIdDelete,
  deleteMinuteVersionMinuteVersionsMinuteVersionIdDelete,
  deleteTranscriptionTranscriptionsTranscriptionIdDelete,
  deleteUserTemplateUserTemplatesTemplateIdDelete,
  duplicateUserTemplateUserTemplatesTemplateIdDuplicatePost,
  editUserTemplateUserTemplatesTemplateIdPatch,
  getChatTranscriptionsTranscriptionIdChatChatIdGet,
  getMinuteMinutesMinutesIdGet,
  getMinuteVersionMinuteVersionsMinuteVersionIdGet,
  getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGet,
  getTemplatesTemplatesGet,
  getTranscriptionTranscriptionsTranscriptionIdGet,
  getUserTemplatesUserTemplatesGet,
  getUserTemplateUserTemplatesTemplateIdGet,
  getUserUsersMeGet,
  listChatTranscriptionsTranscriptionIdChatGet,
  listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGet,
  listMinuteVersionsMinutesMinuteIdVersionsGet,
  listTranscriptionsTranscriptionsGet,
  saveTranscriptionTranscriptionsTranscriptionIdPatch,
  updateDataRetentionUsersDataRetentionPatch,
  type Options,
} from '../sdk.gen'
import type {
  CreateChatTranscriptionsTranscriptionIdChatPostData,
  CreateChatTranscriptionsTranscriptionIdChatPostError,
  CreateChatTranscriptionsTranscriptionIdChatPostResponse,
  CreateMinuteTranscriptionTranscriptionIdMinutesPostData,
  CreateMinuteTranscriptionTranscriptionIdMinutesPostError,
  CreateMinuteVersionMinutesMinuteIdVersionsPostData,
  CreateMinuteVersionMinutesMinuteIdVersionsPostError,
  CreateMinuteVersionMinutesMinuteIdVersionsPostResponse,
  CreateRecordingRecordingsPostData,
  CreateRecordingRecordingsPostError,
  CreateRecordingRecordingsPostResponse,
  CreateTranscriptionTranscriptionsPostData,
  CreateTranscriptionTranscriptionsPostError,
  CreateTranscriptionTranscriptionsPostResponse,
  CreateUserTemplateUserTemplatesPostData,
  CreateUserTemplateUserTemplatesPostError,
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteData,
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteError,
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponse,
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteData,
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteError,
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponse,
  DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteData,
  DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteError,
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteData,
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteError,
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponse,
  DeleteUserTemplateUserTemplatesTemplateIdDeleteData,
  DeleteUserTemplateUserTemplatesTemplateIdDeleteError,
  DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData,
  DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostError,
  EditUserTemplateUserTemplatesTemplateIdPatchData,
  EditUserTemplateUserTemplatesTemplateIdPatchError,
  GetChatTranscriptionsTranscriptionIdChatChatIdGetData,
  GetMinuteMinutesMinutesIdGetData,
  GetMinuteVersionMinuteVersionsMinuteVersionIdGetData,
  GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetData,
  GetTemplatesTemplatesGetData,
  GetTranscriptionTranscriptionsTranscriptionIdGetData,
  GetUserTemplatesUserTemplatesGetData,
  GetUserTemplateUserTemplatesTemplateIdGetData,
  GetUserUsersMeGetData,
  ListChatTranscriptionsTranscriptionIdChatGetData,
  ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetData,
  ListMinuteVersionsMinutesMinuteIdVersionsGetData,
  ListTranscriptionsTranscriptionsGetData,
  ListTranscriptionsTranscriptionsGetError,
  ListTranscriptionsTranscriptionsGetResponse,
  SaveTranscriptionTranscriptionsTranscriptionIdPatchData,
  SaveTranscriptionTranscriptionsTranscriptionIdPatchError,
  SaveTranscriptionTranscriptionsTranscriptionIdPatchResponse,
  UpdateDataRetentionUsersDataRetentionPatchData,
  UpdateDataRetentionUsersDataRetentionPatchError,
  UpdateDataRetentionUsersDataRetentionPatchResponse,
} from '../types.gen'

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const listTranscriptionsTranscriptionsGetQueryKey = (
  options?: Options<ListTranscriptionsTranscriptionsGetData>
) => createQueryKey('listTranscriptionsTranscriptionsGet', options)

/**
 * List Transcriptions
 * Get paginated metadata for transcriptions for the current user.
 */
export const listTranscriptionsTranscriptionsGetOptions = (
  options?: Options<ListTranscriptionsTranscriptionsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listTranscriptionsTranscriptionsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listTranscriptionsTranscriptionsGetQueryKey(options),
  })
}

const createInfiniteParams = <
  K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>,
>(
  queryKey: QueryKey<Options>,
  page: K
) => {
  const params = {
    ...queryKey[0],
  }
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    }
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    }
  }
  if (page.path) {
    params.path = {
      ...(queryKey[0].path as any),
      ...(page.path as any),
    }
  }
  if (page.query) {
    params.query = {
      ...(queryKey[0].query as any),
      ...(page.query as any),
    }
  }
  return params as unknown as typeof page
}

export const listTranscriptionsTranscriptionsGetInfiniteQueryKey = (
  options?: Options<ListTranscriptionsTranscriptionsGetData>
): QueryKey<Options<ListTranscriptionsTranscriptionsGetData>> =>
  createQueryKey('listTranscriptionsTranscriptionsGet', options, true)

/**
 * List Transcriptions
 * Get paginated metadata for transcriptions for the current user.
 */
export const listTranscriptionsTranscriptionsGetInfiniteOptions = (
  options?: Options<ListTranscriptionsTranscriptionsGetData>
) => {
  return infiniteQueryOptions<
    ListTranscriptionsTranscriptionsGetResponse,
    ListTranscriptionsTranscriptionsGetError,
    InfiniteData<ListTranscriptionsTranscriptionsGetResponse>,
    QueryKey<Options<ListTranscriptionsTranscriptionsGetData>>,
    | number
    | Pick<
        QueryKey<Options<ListTranscriptionsTranscriptionsGetData>>[0],
        'body' | 'headers' | 'path' | 'query'
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<Options<ListTranscriptionsTranscriptionsGetData>>[0],
          'body' | 'headers' | 'path' | 'query'
        > =
          typeof pageParam === 'object'
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              }
        const params = createInfiniteParams(queryKey, page)
        const { data } = await listTranscriptionsTranscriptionsGet({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        })
        return data
      },
      queryKey: listTranscriptionsTranscriptionsGetInfiniteQueryKey(options),
    }
  )
}

export const createTranscriptionTranscriptionsPostQueryKey = (
  options: Options<CreateTranscriptionTranscriptionsPostData>
) => createQueryKey('createTranscriptionTranscriptionsPost', options)

/**
 * Create Transcription
 * Start a transcription job.
 */
export const createTranscriptionTranscriptionsPostOptions = (
  options: Options<CreateTranscriptionTranscriptionsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createTranscriptionTranscriptionsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createTranscriptionTranscriptionsPostQueryKey(options),
  })
}

/**
 * Create Transcription
 * Start a transcription job.
 */
export const createTranscriptionTranscriptionsPostMutation = (
  options?: Partial<Options<CreateTranscriptionTranscriptionsPostData>>
): UseMutationOptions<
  CreateTranscriptionTranscriptionsPostResponse,
  CreateTranscriptionTranscriptionsPostError,
  Options<CreateTranscriptionTranscriptionsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateTranscriptionTranscriptionsPostResponse,
    CreateTranscriptionTranscriptionsPostError,
    Options<CreateTranscriptionTranscriptionsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createTranscriptionTranscriptionsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const createRecordingRecordingsPostQueryKey = (
  options: Options<CreateRecordingRecordingsPostData>
) => createQueryKey('createRecordingRecordingsPost', options)

/**
 * Create Recording
 */
export const createRecordingRecordingsPostOptions = (
  options: Options<CreateRecordingRecordingsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createRecordingRecordingsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createRecordingRecordingsPostQueryKey(options),
  })
}

/**
 * Create Recording
 */
export const createRecordingRecordingsPostMutation = (
  options?: Partial<Options<CreateRecordingRecordingsPostData>>
): UseMutationOptions<
  CreateRecordingRecordingsPostResponse,
  CreateRecordingRecordingsPostError,
  Options<CreateRecordingRecordingsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateRecordingRecordingsPostResponse,
    CreateRecordingRecordingsPostError,
    Options<CreateRecordingRecordingsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createRecordingRecordingsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete Transcription
 * Delete a specific transcription by ID.
 */
export const deleteTranscriptionTranscriptionsTranscriptionIdDeleteMutation = (
  options?: Partial<
    Options<DeleteTranscriptionTranscriptionsTranscriptionIdDeleteData>
  >
): UseMutationOptions<
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponse,
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteError,
  Options<DeleteTranscriptionTranscriptionsTranscriptionIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponse,
    DeleteTranscriptionTranscriptionsTranscriptionIdDeleteError,
    Options<DeleteTranscriptionTranscriptionsTranscriptionIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await deleteTranscriptionTranscriptionsTranscriptionIdDelete({
          ...options,
          ...localOptions,
          throwOnError: true,
        })
      return data
    },
  }
  return mutationOptions
}

export const getTranscriptionTranscriptionsTranscriptionIdGetQueryKey = (
  options: Options<GetTranscriptionTranscriptionsTranscriptionIdGetData>
) => createQueryKey('getTranscriptionTranscriptionsTranscriptionIdGet', options)

/**
 * Get Transcription
 * Get a specific transcription by ID.
 */
export const getTranscriptionTranscriptionsTranscriptionIdGetOptions = (
  options: Options<GetTranscriptionTranscriptionsTranscriptionIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTranscriptionTranscriptionsTranscriptionIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTranscriptionTranscriptionsTranscriptionIdGetQueryKey(options),
  })
}

/**
 * Save Transcription
 * Save or update a transcription.
 */
export const saveTranscriptionTranscriptionsTranscriptionIdPatchMutation = (
  options?: Partial<
    Options<SaveTranscriptionTranscriptionsTranscriptionIdPatchData>
  >
): UseMutationOptions<
  SaveTranscriptionTranscriptionsTranscriptionIdPatchResponse,
  SaveTranscriptionTranscriptionsTranscriptionIdPatchError,
  Options<SaveTranscriptionTranscriptionsTranscriptionIdPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    SaveTranscriptionTranscriptionsTranscriptionIdPatchResponse,
    SaveTranscriptionTranscriptionsTranscriptionIdPatchError,
    Options<SaveTranscriptionTranscriptionsTranscriptionIdPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await saveTranscriptionTranscriptionsTranscriptionIdPatch({
          ...options,
          ...localOptions,
          throwOnError: true,
        })
      return data
    },
  }
  return mutationOptions
}

export const getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetQueryKey =
  (
    options: Options<GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetData>
  ) =>
    createQueryKey(
      'getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGet',
      options
    )

/**
 * Get Recordings For Transcription
 */
export const getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetOptions =
  (
    options: Options<GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGet(
            {
              ...options,
              ...queryKey[0],
              signal,
              throwOnError: true,
            }
          )
        return data
      },
      queryKey:
        getRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetQueryKey(
          options
        ),
    })
  }

export const getUserUsersMeGetQueryKey = (
  options?: Options<GetUserUsersMeGetData>
) => createQueryKey('getUserUsersMeGet', options)

/**
 * Get User
 */
export const getUserUsersMeGetOptions = (
  options?: Options<GetUserUsersMeGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserUsersMeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUserUsersMeGetQueryKey(options),
  })
}

/**
 * Update Data Retention
 * Update the data retention period for the current user.
 *
 * Args:
 * data: Request body containing data_retention_days
 * current_user: The current authenticated user
 */
export const updateDataRetentionUsersDataRetentionPatchMutation = (
  options?: Partial<Options<UpdateDataRetentionUsersDataRetentionPatchData>>
): UseMutationOptions<
  UpdateDataRetentionUsersDataRetentionPatchResponse,
  UpdateDataRetentionUsersDataRetentionPatchError,
  Options<UpdateDataRetentionUsersDataRetentionPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateDataRetentionUsersDataRetentionPatchResponse,
    UpdateDataRetentionUsersDataRetentionPatchError,
    Options<UpdateDataRetentionUsersDataRetentionPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateDataRetentionUsersDataRetentionPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetQueryKey =
  (
    options: Options<ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetData>
  ) =>
    createQueryKey(
      'listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGet',
      options
    )

/**
 * List Minutes For Transcription
 */
export const listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetOptions =
  (
    options: Options<ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGet(
            {
              ...options,
              ...queryKey[0],
              signal,
              throwOnError: true,
            }
          )
        return data
      },
      queryKey:
        listMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetQueryKey(
          options
        ),
    })
  }

export const createMinuteTranscriptionTranscriptionIdMinutesPostQueryKey = (
  options: Options<CreateMinuteTranscriptionTranscriptionIdMinutesPostData>
) =>
  createQueryKey('createMinuteTranscriptionTranscriptionIdMinutesPost', options)

/**
 * Create Minute
 */
export const createMinuteTranscriptionTranscriptionIdMinutesPostOptions = (
  options: Options<CreateMinuteTranscriptionTranscriptionIdMinutesPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await createMinuteTranscriptionTranscriptionIdMinutesPost({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        })
      return data
    },
    queryKey:
      createMinuteTranscriptionTranscriptionIdMinutesPostQueryKey(options),
  })
}

/**
 * Create Minute
 */
export const createMinuteTranscriptionTranscriptionIdMinutesPostMutation = (
  options?: Partial<
    Options<CreateMinuteTranscriptionTranscriptionIdMinutesPostData>
  >
): UseMutationOptions<
  unknown,
  CreateMinuteTranscriptionTranscriptionIdMinutesPostError,
  Options<CreateMinuteTranscriptionTranscriptionIdMinutesPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    CreateMinuteTranscriptionTranscriptionIdMinutesPostError,
    Options<CreateMinuteTranscriptionTranscriptionIdMinutesPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await createMinuteTranscriptionTranscriptionIdMinutesPost({
          ...options,
          ...localOptions,
          throwOnError: true,
        })
      return data
    },
  }
  return mutationOptions
}

export const getMinuteMinutesMinutesIdGetQueryKey = (
  options: Options<GetMinuteMinutesMinutesIdGetData>
) => createQueryKey('getMinuteMinutesMinutesIdGet', options)

/**
 * Get Minute
 */
export const getMinuteMinutesMinutesIdGetOptions = (
  options: Options<GetMinuteMinutesMinutesIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMinuteMinutesMinutesIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getMinuteMinutesMinutesIdGetQueryKey(options),
  })
}

export const listMinuteVersionsMinutesMinuteIdVersionsGetQueryKey = (
  options: Options<ListMinuteVersionsMinutesMinuteIdVersionsGetData>
) => createQueryKey('listMinuteVersionsMinutesMinuteIdVersionsGet', options)

/**
 * List Minute Versions
 */
export const listMinuteVersionsMinutesMinuteIdVersionsGetOptions = (
  options: Options<ListMinuteVersionsMinutesMinuteIdVersionsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listMinuteVersionsMinutesMinuteIdVersionsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listMinuteVersionsMinutesMinuteIdVersionsGetQueryKey(options),
  })
}

export const createMinuteVersionMinutesMinuteIdVersionsPostQueryKey = (
  options: Options<CreateMinuteVersionMinutesMinuteIdVersionsPostData>
) => createQueryKey('createMinuteVersionMinutesMinuteIdVersionsPost', options)

/**
 * Create Minute Version
 */
export const createMinuteVersionMinutesMinuteIdVersionsPostOptions = (
  options: Options<CreateMinuteVersionMinutesMinuteIdVersionsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createMinuteVersionMinutesMinuteIdVersionsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createMinuteVersionMinutesMinuteIdVersionsPostQueryKey(options),
  })
}

/**
 * Create Minute Version
 */
export const createMinuteVersionMinutesMinuteIdVersionsPostMutation = (
  options?: Partial<Options<CreateMinuteVersionMinutesMinuteIdVersionsPostData>>
): UseMutationOptions<
  CreateMinuteVersionMinutesMinuteIdVersionsPostResponse,
  CreateMinuteVersionMinutesMinuteIdVersionsPostError,
  Options<CreateMinuteVersionMinutesMinuteIdVersionsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateMinuteVersionMinutesMinuteIdVersionsPostResponse,
    CreateMinuteVersionMinutesMinuteIdVersionsPostError,
    Options<CreateMinuteVersionMinutesMinuteIdVersionsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createMinuteVersionMinutesMinuteIdVersionsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete Minute Version
 */
export const deleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteMutation = (
  options?: Partial<
    Options<DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteData>
  >
): UseMutationOptions<
  unknown,
  DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteError,
  Options<DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteError,
    Options<DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await deleteMinuteVersionMinuteVersionsMinuteVersionIdDelete({
          ...options,
          ...localOptions,
          throwOnError: true,
        })
      return data
    },
  }
  return mutationOptions
}

export const getMinuteVersionMinuteVersionsMinuteVersionIdGetQueryKey = (
  options: Options<GetMinuteVersionMinuteVersionsMinuteVersionIdGetData>
) => createQueryKey('getMinuteVersionMinuteVersionsMinuteVersionIdGet', options)

/**
 * Get Minute Version
 */
export const getMinuteVersionMinuteVersionsMinuteVersionIdGetOptions = (
  options: Options<GetMinuteVersionMinuteVersionsMinuteVersionIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getMinuteVersionMinuteVersionsMinuteVersionIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getMinuteVersionMinuteVersionsMinuteVersionIdGetQueryKey(options),
  })
}

export const getTemplatesTemplatesGetQueryKey = (
  options?: Options<GetTemplatesTemplatesGetData>
) => createQueryKey('getTemplatesTemplatesGet', options)

/**
 * Get Templates
 * Get metadata for all templates.
 */
export const getTemplatesTemplatesGetOptions = (
  options?: Options<GetTemplatesTemplatesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTemplatesTemplatesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getTemplatesTemplatesGetQueryKey(options),
  })
}

export const getUserTemplatesUserTemplatesGetQueryKey = (
  options?: Options<GetUserTemplatesUserTemplatesGetData>
) => createQueryKey('getUserTemplatesUserTemplatesGet', options)

/**
 * Get User Templates
 */
export const getUserTemplatesUserTemplatesGetOptions = (
  options?: Options<GetUserTemplatesUserTemplatesGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserTemplatesUserTemplatesGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUserTemplatesUserTemplatesGetQueryKey(options),
  })
}

export const createUserTemplateUserTemplatesPostQueryKey = (
  options: Options<CreateUserTemplateUserTemplatesPostData>
) => createQueryKey('createUserTemplateUserTemplatesPost', options)

/**
 * Create User Template
 */
export const createUserTemplateUserTemplatesPostOptions = (
  options: Options<CreateUserTemplateUserTemplatesPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUserTemplateUserTemplatesPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUserTemplateUserTemplatesPostQueryKey(options),
  })
}

/**
 * Create User Template
 */
export const createUserTemplateUserTemplatesPostMutation = (
  options?: Partial<Options<CreateUserTemplateUserTemplatesPostData>>
): UseMutationOptions<
  unknown,
  CreateUserTemplateUserTemplatesPostError,
  Options<CreateUserTemplateUserTemplatesPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    CreateUserTemplateUserTemplatesPostError,
    Options<CreateUserTemplateUserTemplatesPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createUserTemplateUserTemplatesPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete User Template
 */
export const deleteUserTemplateUserTemplatesTemplateIdDeleteMutation = (
  options?: Partial<
    Options<DeleteUserTemplateUserTemplatesTemplateIdDeleteData>
  >
): UseMutationOptions<
  unknown,
  DeleteUserTemplateUserTemplatesTemplateIdDeleteError,
  Options<DeleteUserTemplateUserTemplatesTemplateIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DeleteUserTemplateUserTemplatesTemplateIdDeleteError,
    Options<DeleteUserTemplateUserTemplatesTemplateIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteUserTemplateUserTemplatesTemplateIdDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getUserTemplateUserTemplatesTemplateIdGetQueryKey = (
  options: Options<GetUserTemplateUserTemplatesTemplateIdGetData>
) => createQueryKey('getUserTemplateUserTemplatesTemplateIdGet', options)

/**
 * Get User Template
 */
export const getUserTemplateUserTemplatesTemplateIdGetOptions = (
  options: Options<GetUserTemplateUserTemplatesTemplateIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserTemplateUserTemplatesTemplateIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUserTemplateUserTemplatesTemplateIdGetQueryKey(options),
  })
}

/**
 * Edit User Template
 */
export const editUserTemplateUserTemplatesTemplateIdPatchMutation = (
  options?: Partial<Options<EditUserTemplateUserTemplatesTemplateIdPatchData>>
): UseMutationOptions<
  unknown,
  EditUserTemplateUserTemplatesTemplateIdPatchError,
  Options<EditUserTemplateUserTemplatesTemplateIdPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    EditUserTemplateUserTemplatesTemplateIdPatchError,
    Options<EditUserTemplateUserTemplatesTemplateIdPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await editUserTemplateUserTemplatesTemplateIdPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const duplicateUserTemplateUserTemplatesTemplateIdDuplicatePostQueryKey =
  (
    options: Options<DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData>
  ) =>
    createQueryKey(
      'duplicateUserTemplateUserTemplatesTemplateIdDuplicatePost',
      options
    )

/**
 * Duplicate User Template
 */
export const duplicateUserTemplateUserTemplatesTemplateIdDuplicatePostOptions =
  (
    options: Options<DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await duplicateUserTemplateUserTemplatesTemplateIdDuplicatePost({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          })
        return data
      },
      queryKey:
        duplicateUserTemplateUserTemplatesTemplateIdDuplicatePostQueryKey(
          options
        ),
    })
  }

/**
 * Duplicate User Template
 */
export const duplicateUserTemplateUserTemplatesTemplateIdDuplicatePostMutation =
  (
    options?: Partial<
      Options<DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData>
    >
  ): UseMutationOptions<
    unknown,
    DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostError,
    Options<DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData>
  > => {
    const mutationOptions: UseMutationOptions<
      unknown,
      DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostError,
      Options<DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await duplicateUserTemplateUserTemplatesTemplateIdDuplicatePost({
            ...options,
            ...localOptions,
            throwOnError: true,
          })
        return data
      },
    }
    return mutationOptions
  }

/**
 * Delete Chats
 */
export const deleteChatsTranscriptionsTranscriptionIdChatDeleteMutation = (
  options?: Partial<
    Options<DeleteChatsTranscriptionsTranscriptionIdChatDeleteData>
  >
): UseMutationOptions<
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponse,
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteError,
  Options<DeleteChatsTranscriptionsTranscriptionIdChatDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponse,
    DeleteChatsTranscriptionsTranscriptionIdChatDeleteError,
    Options<DeleteChatsTranscriptionsTranscriptionIdChatDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteChatsTranscriptionsTranscriptionIdChatDelete(
        {
          ...options,
          ...localOptions,
          throwOnError: true,
        }
      )
      return data
    },
  }
  return mutationOptions
}

export const listChatTranscriptionsTranscriptionIdChatGetQueryKey = (
  options: Options<ListChatTranscriptionsTranscriptionIdChatGetData>
) => createQueryKey('listChatTranscriptionsTranscriptionIdChatGet', options)

/**
 * List Chat
 */
export const listChatTranscriptionsTranscriptionIdChatGetOptions = (
  options: Options<ListChatTranscriptionsTranscriptionIdChatGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listChatTranscriptionsTranscriptionIdChatGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listChatTranscriptionsTranscriptionIdChatGetQueryKey(options),
  })
}

export const createChatTranscriptionsTranscriptionIdChatPostQueryKey = (
  options: Options<CreateChatTranscriptionsTranscriptionIdChatPostData>
) => createQueryKey('createChatTranscriptionsTranscriptionIdChatPost', options)

/**
 * Create Chat
 */
export const createChatTranscriptionsTranscriptionIdChatPostOptions = (
  options: Options<CreateChatTranscriptionsTranscriptionIdChatPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createChatTranscriptionsTranscriptionIdChatPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createChatTranscriptionsTranscriptionIdChatPostQueryKey(options),
  })
}

/**
 * Create Chat
 */
export const createChatTranscriptionsTranscriptionIdChatPostMutation = (
  options?: Partial<
    Options<CreateChatTranscriptionsTranscriptionIdChatPostData>
  >
): UseMutationOptions<
  CreateChatTranscriptionsTranscriptionIdChatPostResponse,
  CreateChatTranscriptionsTranscriptionIdChatPostError,
  Options<CreateChatTranscriptionsTranscriptionIdChatPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateChatTranscriptionsTranscriptionIdChatPostResponse,
    CreateChatTranscriptionsTranscriptionIdChatPostError,
    Options<CreateChatTranscriptionsTranscriptionIdChatPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createChatTranscriptionsTranscriptionIdChatPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

/**
 * Delete Chat
 * Delete a specific transcription by ID.
 */
export const deleteChatTranscriptionsTranscriptionIdChatChatIdDeleteMutation = (
  options?: Partial<
    Options<DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteData>
  >
): UseMutationOptions<
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponse,
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteError,
  Options<DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponse,
    DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteError,
    Options<DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await deleteChatTranscriptionsTranscriptionIdChatChatIdDelete({
          ...options,
          ...localOptions,
          throwOnError: true,
        })
      return data
    },
  }
  return mutationOptions
}

export const getChatTranscriptionsTranscriptionIdChatChatIdGetQueryKey = (
  options: Options<GetChatTranscriptionsTranscriptionIdChatChatIdGetData>
) =>
  createQueryKey('getChatTranscriptionsTranscriptionIdChatChatIdGet', options)

/**
 * Get Chat
 */
export const getChatTranscriptionsTranscriptionIdChatChatIdGetOptions = (
  options: Options<GetChatTranscriptionsTranscriptionIdChatChatIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getChatTranscriptionsTranscriptionIdChatChatIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey:
      getChatTranscriptionsTranscriptionIdChatChatIdGetQueryKey(options),
  })
}
