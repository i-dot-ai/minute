// This file is auto-generated by @hey-api/openapi-ts

/**
 * ValidationError
 */
export type ValidationError = {
  /**
   * Location
   */
  loc: Array<string | number>
  /**
   * Message
   */
  msg: string
  /**
   * Error Type
   */
  type: string
}

/**
 * UserTemplate
 */
export type UserTemplate = {
  /**
   * Id
   */
  id?: string
  /**
   * Created Datetime
   */
  created_datetime?: string
  /**
   * Updated Datetime
   */
  updated_datetime?: string
  /**
   * Name
   */
  name: string
  /**
   * Content
   */
  content: string
  /**
   * Description
   */
  description?: string
  /**
   * User Id
   */
  user_id?: string | null
}

/**
 * TranscriptionPatchRequest
 */
export type TranscriptionPatchRequest = {
  /**
   * Title
   */
  title?: string | null
  /**
   * Dialogue Entries
   */
  dialogue_entries?: Array<DialogueEntry> | null
}

/**
 * DialogueEntry
 */
export type DialogueEntry = {
  /**
   * Speaker
   */
  speaker: string
  /**
   * Text
   */
  text: string
  /**
   * Start Time
   */
  start_time: number
  /**
   * End Time
   */
  end_time: number
}

/**
 * TranscriptionMetadata
 * Pydantic model for transcription metadata.
 */
export type TranscriptionMetadata = {
  /**
   * Id
   */
  id: string
  /**
   * Created Datetime
   */
  created_datetime: string
  /**
   * Title
   */
  title?: string | null
  /**
   * Text
   */
  text: string
  status: JobStatus
}

/**
 * JobStatus
 */
export type JobStatus =
  | 'awaiting_start'
  | 'in_progress'
  | 'completed'
  | 'failed'

/**
 * TranscriptionGetResponse
 */
export type TranscriptionGetResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Title
   */
  title: string | null
  /**
   * Dialogue Entries
   */
  dialogue_entries: Array<DialogueEntry> | null
  status: JobStatus
  /**
   * Created Datetime
   */
  created_datetime: string
}

/**
 * TranscriptionCreateResponse
 */
export type TranscriptionCreateResponse = {
  /**
   * Id
   */
  id: string
}

/**
 * TranscriptionCreateRequest
 */
export type TranscriptionCreateRequest = {
  /**
   * Recording Id
   */
  recording_id: string
  /**
   * Template Name
   */
  template_name: string
  /**
   * Template Id
   */
  template_id?: string | null
  /**
   * Agenda
   */
  agenda?: string | null
  /**
   * Title
   */
  title?: string | null
}

/**
 * Transcription
 */
export type Transcription = {
  /**
   * Id
   */
  id?: string
  /**
   * Created Datetime
   */
  created_datetime?: string
  /**
   * Updated Datetime
   */
  updated_datetime?: string
  /**
   * Title
   */
  title?: string | null
  /**
   * Dialogue Entries
   */
  dialogue_entries?: Array<DialogueEntry> | null
  status?: JobStatus
  /**
   * Error
   */
  error?: string | null
  /**
   * User Id
   */
  user_id?: string | null
  /**
   * Legacy Minute Versions
   */
  legacy_minute_versions?: Array<{
    [key: string]: unknown
  }> | null
}

/**
 * TemplateMetadata
 */
export type TemplateMetadata = {
  /**
   * Name
   */
  name: string
  /**
   * Description
   */
  description: string
  /**
   * Category
   */
  category: string
  agenda_usage: AgendaUsage
}

/**
 * AgendaUsage
 */
export type AgendaUsage = 'not_used' | 'optional' | 'required'

/**
 * SingleRecording
 */
export type SingleRecording = {
  /**
   * Id
   */
  id: string
  /**
   * Url
   */
  url: string
  /**
   * Extension
   */
  extension: string
}

/**
 * RecordingCreateResponse
 */
export type RecordingCreateResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Upload Url
   */
  upload_url: string
}

/**
 * RecordingCreateRequest
 */
export type RecordingCreateRequest = {
  /**
   * File Extension
   */
  file_extension: string
}

/**
 * PatchUserTemplateRequest
 */
export type PatchUserTemplateRequest = {
  /**
   * Name
   */
  name?: string | null
  /**
   * Content
   */
  content?: string | null
  /**
   * Description
   */
  description?: string | null
}

/**
 * PaginatedTranscriptionsResponse
 * Paginated response for transcriptions.
 */
export type PaginatedTranscriptionsResponse = {
  /**
   * Items
   */
  items: Array<TranscriptionMetadata>
  /**
   * Total Count
   */
  total_count: number
  /**
   * Page
   */
  page: number
  /**
   * Page Size
   */
  page_size: number
  /**
   * Total Pages
   */
  total_pages: number
}

/**
 * MinutesCreateRequest
 */
export type MinutesCreateRequest = {
  /**
   * Template Name
   * Name of the template to use for the minutes
   */
  template_name: string
  /**
   * Template Id
   * Optional id of user template
   */
  template_id: string | null
  /**
   * Agenda
   * The agenda for the meeting
   */
  agenda?: string | null
}

/**
 * MinuteVersionResponse
 */
export type MinuteVersionResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Minute Id
   */
  minute_id: string
  status: JobStatus
  /**
   * Created Datetime
   */
  created_datetime: string
  /**
   * Html Content
   */
  html_content: string
  /**
   * Error
   */
  error: string | null
  /**
   * Ai Edit Instructions
   */
  ai_edit_instructions: string | null
  content_source: ContentSource
}

/**
 * ContentSource
 */
export type ContentSource = 'manual_edit' | 'ai_edit' | 'initial_generation'

/**
 * MinuteVersionCreateRequest
 */
export type MinuteVersionCreateRequest = {
  /**
   * If the content source is an AI edit, store the instruction and source version id here
   */
  ai_edit_instructions?: AiEdit | null
  content_source: ContentSource
  /**
   * Html Content
   */
  html_content?: string
}

/**
 * AiEdit
 */
export type AiEdit = {
  /**
   * Instruction
   */
  instruction: string
  /**
   * Source Id
   */
  source_id: string
}

/**
 * MinuteVersion
 */
export type MinuteVersion = {
  /**
   * Id
   */
  id?: string
  /**
   * Created Datetime
   */
  created_datetime?: string
  /**
   * Updated Datetime
   */
  updated_datetime?: string
  /**
   * Minute Id
   */
  minute_id: string
  /**
   * Html Content
   */
  html_content?: string
  status?: JobStatus
  /**
   * Error
   */
  error?: string | null
  /**
   * Ai Edit Instructions
   * If the content source is an AI edit, store the instruction here
   */
  ai_edit_instructions?: string | null
  content_source?: ContentSource
}

/**
 * MinuteListItem
 */
export type MinuteListItem = {
  /**
   * Id
   */
  id: string
  /**
   * Created Datetime
   */
  created_datetime: string
  /**
   * Updated Datetime
   */
  updated_datetime: string
  /**
   * Transcription Id
   */
  transcription_id: string
  /**
   * Template Name
   */
  template_name: string
  /**
   * Agenda
   */
  agenda: string | null
}

/**
 * Minute
 */
export type Minute = {
  /**
   * Id
   */
  id?: string
  /**
   * Created Datetime
   */
  created_datetime?: string
  /**
   * Updated Datetime
   */
  updated_datetime?: string
  /**
   * Transcription Id
   */
  transcription_id: string
  /**
   * Template Name
   */
  template_name?: string
  /**
   * User Template Id
   */
  user_template_id?: string | null
  /**
   * Agenda
   */
  agenda?: string | null
}

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
  /**
   * Detail
   */
  detail?: Array<ValidationError>
}

/**
 * GetUserResponse
 */
export type GetUserResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Created Datetime
   */
  created_datetime: string
  /**
   * Updated Datetime
   */
  updated_datetime: string
  /**
   * Email
   */
  email: string
  /**
   * Data Retention Days
   */
  data_retention_days: number | null
  /**
   * Strict Data Retention
   */
  strict_data_retention: boolean
}

/**
 * DataRetentionUpdateResponse
 */
export type DataRetentionUpdateResponse = {
  /**
   * Data Retention Days
   */
  data_retention_days: number | null
}

/**
 * CreateUserTemplateRequest
 */
export type CreateUserTemplateRequest = {
  /**
   * Name
   */
  name: string
  /**
   * Content
   */
  content: string
  /**
   * Description
   */
  description: string
}

/**
 * ChatGetResponse
 */
export type ChatGetResponse = {
  /**
   * Id
   */
  id: string
  /**
   * Created Datetime
   */
  created_datetime: string
  /**
   * Updated Datetime
   */
  updated_datetime: string
  /**
   * User Content
   */
  user_content: string
  /**
   * Assistant Content
   */
  assistant_content: string | null
  status: JobStatus
}

/**
 * ChatGetAllResponse
 */
export type ChatGetAllResponse = {
  /**
   * Chat
   */
  chat: Array<ChatGetResponse>
}

/**
 * ChatCreateResponse
 */
export type ChatCreateResponse = {
  /**
   * Id
   */
  id: string
}

/**
 * ChatCreateRequest
 */
export type ChatCreateRequest = {
  /**
   * User Content
   */
  user_content: string
}

export type ListTranscriptionsTranscriptionsGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: {
    /**
     * Page
     * Page number (starts from 1)
     */
    page?: number
    /**
     * Page Size
     * Number of items per page
     */
    page_size?: number
  }
  url: '/transcriptions'
}

export type ListTranscriptionsTranscriptionsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListTranscriptionsTranscriptionsGetError =
  ListTranscriptionsTranscriptionsGetErrors[keyof ListTranscriptionsTranscriptionsGetErrors]

export type ListTranscriptionsTranscriptionsGetResponses = {
  /**
   * Successful Response
   */
  200: PaginatedTranscriptionsResponse
}

export type ListTranscriptionsTranscriptionsGetResponse =
  ListTranscriptionsTranscriptionsGetResponses[keyof ListTranscriptionsTranscriptionsGetResponses]

export type CreateTranscriptionTranscriptionsPostData = {
  body: TranscriptionCreateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/transcriptions'
}

export type CreateTranscriptionTranscriptionsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateTranscriptionTranscriptionsPostError =
  CreateTranscriptionTranscriptionsPostErrors[keyof CreateTranscriptionTranscriptionsPostErrors]

export type CreateTranscriptionTranscriptionsPostResponses = {
  /**
   * Successful Response
   */
  201: TranscriptionCreateResponse
}

export type CreateTranscriptionTranscriptionsPostResponse =
  CreateTranscriptionTranscriptionsPostResponses[keyof CreateTranscriptionTranscriptionsPostResponses]

export type CreateRecordingRecordingsPostData = {
  body: RecordingCreateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/recordings'
}

export type CreateRecordingRecordingsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateRecordingRecordingsPostError =
  CreateRecordingRecordingsPostErrors[keyof CreateRecordingRecordingsPostErrors]

export type CreateRecordingRecordingsPostResponses = {
  /**
   * Successful Response
   */
  200: RecordingCreateResponse
}

export type CreateRecordingRecordingsPostResponse =
  CreateRecordingRecordingsPostResponses[keyof CreateRecordingRecordingsPostResponses]

export type DeleteTranscriptionTranscriptionsTranscriptionIdDeleteData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}'
}

export type DeleteTranscriptionTranscriptionsTranscriptionIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteTranscriptionTranscriptionsTranscriptionIdDeleteError =
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteErrors[keyof DeleteTranscriptionTranscriptionsTranscriptionIdDeleteErrors]

export type DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponse =
  DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponses[keyof DeleteTranscriptionTranscriptionsTranscriptionIdDeleteResponses]

export type GetTranscriptionTranscriptionsTranscriptionIdGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}'
}

export type GetTranscriptionTranscriptionsTranscriptionIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetTranscriptionTranscriptionsTranscriptionIdGetError =
  GetTranscriptionTranscriptionsTranscriptionIdGetErrors[keyof GetTranscriptionTranscriptionsTranscriptionIdGetErrors]

export type GetTranscriptionTranscriptionsTranscriptionIdGetResponses = {
  /**
   * Successful Response
   */
  200: TranscriptionGetResponse
}

export type GetTranscriptionTranscriptionsTranscriptionIdGetResponse =
  GetTranscriptionTranscriptionsTranscriptionIdGetResponses[keyof GetTranscriptionTranscriptionsTranscriptionIdGetResponses]

export type SaveTranscriptionTranscriptionsTranscriptionIdPatchData = {
  body: TranscriptionPatchRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}'
}

export type SaveTranscriptionTranscriptionsTranscriptionIdPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type SaveTranscriptionTranscriptionsTranscriptionIdPatchError =
  SaveTranscriptionTranscriptionsTranscriptionIdPatchErrors[keyof SaveTranscriptionTranscriptionsTranscriptionIdPatchErrors]

export type SaveTranscriptionTranscriptionsTranscriptionIdPatchResponses = {
  /**
   * Successful Response
   */
  200: Transcription
}

export type SaveTranscriptionTranscriptionsTranscriptionIdPatchResponse =
  SaveTranscriptionTranscriptionsTranscriptionIdPatchResponses[keyof SaveTranscriptionTranscriptionsTranscriptionIdPatchResponses]

export type GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetData =
  {
    body?: never
    headers?: {
      /**
       * X-Amzn-Oidc-Accesstoken
       */
      'x-amzn-oidc-accesstoken'?: string | null
    }
    path: {
      /**
       * Transcription Id
       */
      transcription_id: string
    }
    query?: never
    url: '/transcriptions/{transcription_id}/recordings'
  }

export type GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetError =
  GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetErrors[keyof GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetErrors]

export type GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetResponses =
  {
    /**
     * Response Get Recordings For Transcription Transcriptions  Transcription Id  Recordings Get
     * Successful Response
     */
    200: Array<SingleRecording>
  }

export type GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetResponse =
  GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetResponses[keyof GetRecordingsForTranscriptionTranscriptionsTranscriptionIdRecordingsGetResponses]

export type GetUserUsersMeGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/users/me'
}

export type GetUserUsersMeGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetUserUsersMeGetError =
  GetUserUsersMeGetErrors[keyof GetUserUsersMeGetErrors]

export type GetUserUsersMeGetResponses = {
  /**
   * Successful Response
   */
  200: GetUserResponse
}

export type GetUserUsersMeGetResponse =
  GetUserUsersMeGetResponses[keyof GetUserUsersMeGetResponses]

export type UpdateDataRetentionUsersDataRetentionPatchData = {
  body: DataRetentionUpdateResponse
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/users/data-retention'
}

export type UpdateDataRetentionUsersDataRetentionPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type UpdateDataRetentionUsersDataRetentionPatchError =
  UpdateDataRetentionUsersDataRetentionPatchErrors[keyof UpdateDataRetentionUsersDataRetentionPatchErrors]

export type UpdateDataRetentionUsersDataRetentionPatchResponses = {
  /**
   * Successful Response
   */
  200: GetUserResponse
}

export type UpdateDataRetentionUsersDataRetentionPatchResponse =
  UpdateDataRetentionUsersDataRetentionPatchResponses[keyof UpdateDataRetentionUsersDataRetentionPatchResponses]

export type ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetData =
  {
    body?: never
    headers?: {
      /**
       * X-Amzn-Oidc-Accesstoken
       */
      'x-amzn-oidc-accesstoken'?: string | null
    }
    path: {
      /**
       * Transcription Id
       */
      transcription_id: string
    }
    query?: never
    url: '/transcription/{transcription_id}/minutes'
  }

export type ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetErrors =
  {
    /**
     * Validation Error
     */
    422: HttpValidationError
  }

export type ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetError =
  ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetErrors[keyof ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetErrors]

export type ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetResponses =
  {
    /**
     * Response List Minutes For Transcription Transcription  Transcription Id  Minutes Get
     * Successful Response
     */
    200: Array<MinuteListItem>
  }

export type ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetResponse =
  ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetResponses[keyof ListMinutesForTranscriptionTranscriptionTranscriptionIdMinutesGetResponses]

export type CreateMinuteTranscriptionTranscriptionIdMinutesPostData = {
  body: MinutesCreateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcription/{transcription_id}/minutes'
}

export type CreateMinuteTranscriptionTranscriptionIdMinutesPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateMinuteTranscriptionTranscriptionIdMinutesPostError =
  CreateMinuteTranscriptionTranscriptionIdMinutesPostErrors[keyof CreateMinuteTranscriptionTranscriptionIdMinutesPostErrors]

export type CreateMinuteTranscriptionTranscriptionIdMinutesPostResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetMinuteMinutesMinutesIdGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Minutes Id
     */
    minutes_id: string
  }
  query?: never
  url: '/minutes/{minutes_id}'
}

export type GetMinuteMinutesMinutesIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetMinuteMinutesMinutesIdGetError =
  GetMinuteMinutesMinutesIdGetErrors[keyof GetMinuteMinutesMinutesIdGetErrors]

export type GetMinuteMinutesMinutesIdGetResponses = {
  /**
   * Successful Response
   */
  200: Minute
}

export type GetMinuteMinutesMinutesIdGetResponse =
  GetMinuteMinutesMinutesIdGetResponses[keyof GetMinuteMinutesMinutesIdGetResponses]

export type ListMinuteVersionsMinutesMinuteIdVersionsGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Minute Id
     */
    minute_id: string
  }
  query?: never
  url: '/minutes/{minute_id}/versions'
}

export type ListMinuteVersionsMinutesMinuteIdVersionsGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListMinuteVersionsMinutesMinuteIdVersionsGetError =
  ListMinuteVersionsMinutesMinuteIdVersionsGetErrors[keyof ListMinuteVersionsMinutesMinuteIdVersionsGetErrors]

export type ListMinuteVersionsMinutesMinuteIdVersionsGetResponses = {
  /**
   * Response List Minute Versions Minutes  Minute Id  Versions Get
   * Successful Response
   */
  200: Array<MinuteVersionResponse>
}

export type ListMinuteVersionsMinutesMinuteIdVersionsGetResponse =
  ListMinuteVersionsMinutesMinuteIdVersionsGetResponses[keyof ListMinuteVersionsMinutesMinuteIdVersionsGetResponses]

export type CreateMinuteVersionMinutesMinuteIdVersionsPostData = {
  body: MinuteVersionCreateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Minute Id
     */
    minute_id: string
  }
  query?: never
  url: '/minutes/{minute_id}/versions'
}

export type CreateMinuteVersionMinutesMinuteIdVersionsPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateMinuteVersionMinutesMinuteIdVersionsPostError =
  CreateMinuteVersionMinutesMinuteIdVersionsPostErrors[keyof CreateMinuteVersionMinutesMinuteIdVersionsPostErrors]

export type CreateMinuteVersionMinutesMinuteIdVersionsPostResponses = {
  /**
   * Successful Response
   */
  200: MinuteVersionResponse
}

export type CreateMinuteVersionMinutesMinuteIdVersionsPostResponse =
  CreateMinuteVersionMinutesMinuteIdVersionsPostResponses[keyof CreateMinuteVersionMinutesMinuteIdVersionsPostResponses]

export type DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Minute Version Id
     */
    minute_version_id: string
  }
  query?: never
  url: '/minute_versions/{minute_version_id}'
}

export type DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteError =
  DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteErrors[keyof DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteErrors]

export type DeleteMinuteVersionMinuteVersionsMinuteVersionIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetMinuteVersionMinuteVersionsMinuteVersionIdGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Minute Version Id
     */
    minute_version_id: string
  }
  query?: never
  url: '/minute_versions/{minute_version_id}'
}

export type GetMinuteVersionMinuteVersionsMinuteVersionIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetMinuteVersionMinuteVersionsMinuteVersionIdGetError =
  GetMinuteVersionMinuteVersionsMinuteVersionIdGetErrors[keyof GetMinuteVersionMinuteVersionsMinuteVersionIdGetErrors]

export type GetMinuteVersionMinuteVersionsMinuteVersionIdGetResponses = {
  /**
   * Successful Response
   */
  200: MinuteVersion
}

export type GetMinuteVersionMinuteVersionsMinuteVersionIdGetResponse =
  GetMinuteVersionMinuteVersionsMinuteVersionIdGetResponses[keyof GetMinuteVersionMinuteVersionsMinuteVersionIdGetResponses]

export type GetTemplatesTemplatesGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/templates'
}

export type GetTemplatesTemplatesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetTemplatesTemplatesGetError =
  GetTemplatesTemplatesGetErrors[keyof GetTemplatesTemplatesGetErrors]

export type GetTemplatesTemplatesGetResponses = {
  /**
   * Response Get Templates Templates Get
   * Successful Response
   */
  200: Array<TemplateMetadata>
}

export type GetTemplatesTemplatesGetResponse =
  GetTemplatesTemplatesGetResponses[keyof GetTemplatesTemplatesGetResponses]

export type GetUserTemplatesUserTemplatesGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/user-templates'
}

export type GetUserTemplatesUserTemplatesGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetUserTemplatesUserTemplatesGetError =
  GetUserTemplatesUserTemplatesGetErrors[keyof GetUserTemplatesUserTemplatesGetErrors]

export type GetUserTemplatesUserTemplatesGetResponses = {
  /**
   * Response Get User Templates User Templates Get
   * Successful Response
   */
  200: Array<UserTemplate>
}

export type GetUserTemplatesUserTemplatesGetResponse =
  GetUserTemplatesUserTemplatesGetResponses[keyof GetUserTemplatesUserTemplatesGetResponses]

export type CreateUserTemplateUserTemplatesPostData = {
  body: CreateUserTemplateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path?: never
  query?: never
  url: '/user-templates'
}

export type CreateUserTemplateUserTemplatesPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateUserTemplateUserTemplatesPostError =
  CreateUserTemplateUserTemplatesPostErrors[keyof CreateUserTemplateUserTemplatesPostErrors]

export type CreateUserTemplateUserTemplatesPostResponses = {
  /**
   * Successful Response
   */
  200: UserTemplate
}

export type CreateUserTemplateUserTemplatesPostResponse =
  CreateUserTemplateUserTemplatesPostResponses[keyof CreateUserTemplateUserTemplatesPostResponses]

export type DeleteUserTemplateUserTemplatesTemplateIdDeleteData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Template Id
     */
    template_id: string
  }
  query?: never
  url: '/user-templates/{template_id}'
}

export type DeleteUserTemplateUserTemplatesTemplateIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteUserTemplateUserTemplatesTemplateIdDeleteError =
  DeleteUserTemplateUserTemplatesTemplateIdDeleteErrors[keyof DeleteUserTemplateUserTemplatesTemplateIdDeleteErrors]

export type DeleteUserTemplateUserTemplatesTemplateIdDeleteResponses = {
  /**
   * Successful Response
   */
  200: unknown
}

export type GetUserTemplateUserTemplatesTemplateIdGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Template Id
     */
    template_id: string
  }
  query?: never
  url: '/user-templates/{template_id}'
}

export type GetUserTemplateUserTemplatesTemplateIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetUserTemplateUserTemplatesTemplateIdGetError =
  GetUserTemplateUserTemplatesTemplateIdGetErrors[keyof GetUserTemplateUserTemplatesTemplateIdGetErrors]

export type GetUserTemplateUserTemplatesTemplateIdGetResponses = {
  /**
   * Successful Response
   */
  200: UserTemplate
}

export type GetUserTemplateUserTemplatesTemplateIdGetResponse =
  GetUserTemplateUserTemplatesTemplateIdGetResponses[keyof GetUserTemplateUserTemplatesTemplateIdGetResponses]

export type EditUserTemplateUserTemplatesTemplateIdPatchData = {
  body: PatchUserTemplateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Template Id
     */
    template_id: string
  }
  query?: never
  url: '/user-templates/{template_id}'
}

export type EditUserTemplateUserTemplatesTemplateIdPatchErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type EditUserTemplateUserTemplatesTemplateIdPatchError =
  EditUserTemplateUserTemplatesTemplateIdPatchErrors[keyof EditUserTemplateUserTemplatesTemplateIdPatchErrors]

export type EditUserTemplateUserTemplatesTemplateIdPatchResponses = {
  /**
   * Successful Response
   */
  200: UserTemplate
}

export type EditUserTemplateUserTemplatesTemplateIdPatchResponse =
  EditUserTemplateUserTemplatesTemplateIdPatchResponses[keyof EditUserTemplateUserTemplatesTemplateIdPatchResponses]

export type DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Template Id
     */
    template_id: string
  }
  query?: never
  url: '/user-templates/{template_id}/duplicate'
}

export type DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostError =
  DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostErrors[keyof DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostErrors]

export type DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostResponses =
  {
    /**
     * Successful Response
     */
    200: UserTemplate
  }

export type DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostResponse =
  DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostResponses[keyof DuplicateUserTemplateUserTemplatesTemplateIdDuplicatePostResponses]

export type DeleteChatsTranscriptionsTranscriptionIdChatDeleteData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}/chat'
}

export type DeleteChatsTranscriptionsTranscriptionIdChatDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteChatsTranscriptionsTranscriptionIdChatDeleteError =
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteErrors[keyof DeleteChatsTranscriptionsTranscriptionIdChatDeleteErrors]

export type DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponse =
  DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponses[keyof DeleteChatsTranscriptionsTranscriptionIdChatDeleteResponses]

export type ListChatTranscriptionsTranscriptionIdChatGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}/chat'
}

export type ListChatTranscriptionsTranscriptionIdChatGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type ListChatTranscriptionsTranscriptionIdChatGetError =
  ListChatTranscriptionsTranscriptionIdChatGetErrors[keyof ListChatTranscriptionsTranscriptionIdChatGetErrors]

export type ListChatTranscriptionsTranscriptionIdChatGetResponses = {
  /**
   * Successful Response
   */
  200: ChatGetAllResponse
}

export type ListChatTranscriptionsTranscriptionIdChatGetResponse =
  ListChatTranscriptionsTranscriptionIdChatGetResponses[keyof ListChatTranscriptionsTranscriptionIdChatGetResponses]

export type CreateChatTranscriptionsTranscriptionIdChatPostData = {
  body: ChatCreateRequest
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}/chat'
}

export type CreateChatTranscriptionsTranscriptionIdChatPostErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type CreateChatTranscriptionsTranscriptionIdChatPostError =
  CreateChatTranscriptionsTranscriptionIdChatPostErrors[keyof CreateChatTranscriptionsTranscriptionIdChatPostErrors]

export type CreateChatTranscriptionsTranscriptionIdChatPostResponses = {
  /**
   * Successful Response
   */
  201: ChatCreateResponse
}

export type CreateChatTranscriptionsTranscriptionIdChatPostResponse =
  CreateChatTranscriptionsTranscriptionIdChatPostResponses[keyof CreateChatTranscriptionsTranscriptionIdChatPostResponses]

export type DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
    /**
     * Chat Id
     */
    chat_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}/chat/{chat_id}'
}

export type DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteError =
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteErrors[keyof DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteErrors]

export type DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponses = {
  /**
   * Successful Response
   */
  204: void
}

export type DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponse =
  DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponses[keyof DeleteChatTranscriptionsTranscriptionIdChatChatIdDeleteResponses]

export type GetChatTranscriptionsTranscriptionIdChatChatIdGetData = {
  body?: never
  headers?: {
    /**
     * X-Amzn-Oidc-Accesstoken
     */
    'x-amzn-oidc-accesstoken'?: string | null
  }
  path: {
    /**
     * Transcription Id
     */
    transcription_id: string
    /**
     * Chat Id
     */
    chat_id: string
  }
  query?: never
  url: '/transcriptions/{transcription_id}/chat/{chat_id}'
}

export type GetChatTranscriptionsTranscriptionIdChatChatIdGetErrors = {
  /**
   * Validation Error
   */
  422: HttpValidationError
}

export type GetChatTranscriptionsTranscriptionIdChatChatIdGetError =
  GetChatTranscriptionsTranscriptionIdChatChatIdGetErrors[keyof GetChatTranscriptionsTranscriptionIdChatChatIdGetErrors]

export type GetChatTranscriptionsTranscriptionIdChatChatIdGetResponses = {
  /**
   * Successful Response
   */
  200: ChatGetResponse
}

export type GetChatTranscriptionsTranscriptionIdChatChatIdGetResponse =
  GetChatTranscriptionsTranscriptionIdChatChatIdGetResponses[keyof GetChatTranscriptionsTranscriptionIdChatChatIdGetResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:8080' | (string & {})
}
